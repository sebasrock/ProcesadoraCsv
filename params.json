{
  "name": "Procesadoracsv",
  "tagline": "API for transformation the CSV files to java objects, validations of structure and formattin data",
  "body": "#ProcesadoraCsv\r\n\r\nAPI for transformation the CSV files to java objects, validations of structure and formatting data\r\n\r\n## Synopsis\r\n\r\nIt's solution for transform, validation and formatting data,that from CSV file , it's way more easy  with annotations @.\r\n\r\nProcasadoraCsv can read  many structures in only file\r\n\r\n## Code Example\r\n\r\nCall to power\r\n```java\r\n ConversorArchivos<TestBugIndex> csv = new ConversorArchivos<TestBugIndex>();\r\nResultadoCargue<TestBugIndex> resultadoCargue = csv.ejecutar(TestBugIndex.class, archivo, TiposArchivo.CSV);\r\n```\r\nRead Basic structure \r\n\r\n```\r\nEPS005|2000-03-27|2015-03-31|1\r\nEPS005|2000-03-27|2015-03-31|1\r\n```\r\n\r\n```java\r\n\r\n@DatosArchivo(cantidadColumnas = 4, separador = \"|\")\r\npublic class TestDtoBasico {\r\n    @DatosCampo(posicion = 0, trim = true)\r\n    private String codigoEPS;\r\n    @DatosCampo(posicion = 1, trim = true)\r\n    @ValidarCampo(formatoFecha = \"yyyy-MM-dd\")\r\n    private Date fechaInicialPeriodoReportado;\r\n    @DatosCampo(posicion = 2, trim = true)\r\n    @ValidarCampo(formatoFecha = \"yyyy-MM-dd\")\r\n    private Date fechaFinalPeriodoReportado;\r\n    @DatosCampo(posicion = 3, trim = true)\r\n    private int numeroRegistroArchivo;\r\n    .......\r\n    \r\n}\r\n```\r\n\r\nRead file embeds an object in another\r\n\r\n```\r\n1|EPS005|2000-03-27|2015-03-31|1\r\n1|EPS005|2000-03-27|2015-03-31|1\r\n```\r\n\r\n```java\r\n@DatosArchivo(separador = \"|\", cantidadColumnas = 5)\r\npublic class TestDtoOneToOne implements Serializable {\r\n\r\n    @DatosCampo(posicion = 0)\r\n    private int consecutivo;\r\n\r\n    @OneToOne\r\n    private TestHijoOneToOne testHijoOneToOne;\r\n\r\n    ......    \r\n}\r\n```\r\n```java\r\npublic class TestHijoOneToOne implements Serializable {\r\n\r\n    @DatosCampo(posicion = 1, trim = true)\r\n    private String codigoEPS;\r\n    @DatosCampo(posicion = 2, trim = true)\r\n    @ValidarCampo( formatoFecha = \"yyyy-MM-dd\")\r\n    private Date fechaInicialPeriodoReportado;\r\n    @DatosCampo(posicion = 3, trim = true)\r\n    @ValidarCampo(formatoFecha = \"yyyy-MM-dd\")\r\n    private Date fechaFinalPeriodoReportado;\r\n    @DatosCampo(posicion = 4, trim = true)\r\n    private int numeroRegistroArchivo;\r\n\r\n    ......    \r\n}\r\n```\r\n\r\nRead many structures\r\n\r\n```\r\n1|EPS005|1890-02-27|2015-03-20|3\r\n2|1|1969-05-08|6\r\n2||1969-05-08|6\r\n2|45|1969-05-08|6\r\n1|EPS006|1890-02-27|2015-03-20|2\r\n2|1|1969-05-08|6\r\n2||1969-05-08|6\r\n```\r\n\r\n```java\r\n@DatosArchivo(separador = \"|\", cantidadColumnas = 5 , multiEstructura = true)\r\npublic class TestDtoOneToMany implements Serializable {\r\n\r\n    @DatosCampo(posicion = 1, trim = true)\r\n    private String codigoEPS;\r\n    @DatosCampo(posicion = 2, trim = true)\r\n    @ValidarCampo(formatoFecha = \"yyyy-MM-dd\")\r\n    private Date fechaInicialPeriodoReportado;\r\n    @DatosCampo(posicion = 3, trim = true)\r\n    @ValidarCampo(formatoFecha = \"yyyy-MM-dd\")\r\n    private Date fechaFinalPeriodoReportado;\r\n    @DatosCampo(posicion = 4, trim = true)\r\n    private int numeroRegistroArchivo;\r\n\r\n    @OneToMany(palabraResevada = \"2\")\r\n    private List<TestHijoOneToMany> testHijoOneToManies;\r\n```\r\n```java\r\n@DatosArchivo(separador = \"|\", cantidadColumnas = 4)\r\npublic class TestHijoOneToMany implements Serializable {\r\n\r\n    @DatosCampo(posicion = 1)\r\n    private String codigo;\r\n    @DatosCampo(posicion = 2)\r\n    @ValidarCampo(formatoFecha = \"yyyy-MM-dd\")\r\n    private Date fecha;\r\n    @DatosCampo(posicion = 3)\r\n    private Long numeroLong;\r\n```\r\n\r\nWrite file csv from java object\r\n\r\n```java\r\nList<TestDtoBasicoEscritura> archivo = ....\r\nConversorObjetos<TestDtoBasicoEscritura> csv = new ConversorObjetos<TestDtoBasicoEscritura>();\r\nByteArrayOutputStream resultadoCargue = csv.ejecutar(archivo, TiposArchivo.CSV);\r\n```\r\n```java\r\n@DatosArchivo(cantidadColumnas = 4, separador = \"|\",nombre = \"TESTs\")\r\npublic class TestDtoBasicoEscritura {\r\n    @DatosCampo(posicion = 0, nombre = \"COODIGO\")\r\n    private String codigoEPS;\r\n    @DatosCampo(posicion = 1, nombre = \"FECHA INICIAL\")\r\n    @ValidarCampo(formatoFecha = \"yyyy-MM-dd\")\r\n    private Date fechaInicialPeriodoReportado;\r\n    @DatosCampo(posicion = 2, nombre = \"FECHA FINAL\")\r\n    @ValidarCampo(formatoFecha = \"yyyy-MM-dd\")\r\n    private Date fechaFinalPeriodoReportado;\r\n    @DatosCampo(posicion = 3, nombre = \"NUMERO\")\r\n    private int numeroRegistroArchivo;\r\n```\r\n\r\n***for more examples see the unit test***\r\n\r\n## Motivation\r\n\r\nThe main reason is make easy our work\r\n\r\n## Installation\r\n\r\n1. Download proyect and run **maven install** \r\n2. Put Jar in your repository\r\n3. Add dependency to proyect\r\n4. To work\r\n\r\n## API Reference\r\n\r\n\r\n* **@DatosArchivo** \r\n * String nombre() default \"\";  ----> the name of output file\r\n * String separador() default \",\"; ----> the token in file to read\r\n * int cantidadColumnas(); ----> the number of columns in row that represents to Object\r\n * boolean saltarPrimeraLinea() default false; ----> if you want skip first line\r\n * boolean multiEstructura() default false;  ----> Flag for multi-structure for api\r\n\r\n* **@DatosCampo** \r\n  *  boolean trim() default false; ----> Delete spaces in begin and end to word\r\n  *  String nombre() default \"\"; ----> Name column to output file\r\n  *  int posicion() default 0; ----> Number column in row, that represents  property in class\r\n  *  Class<? extends ConversionPersonal> convercionClass() default ConversionPersonal.class; ----> Custom conversion data\r\n\r\n* **@OneToOne**\r\n\r\n* **@OneToMany**\r\n * String palabraResevada(); ----> The chart represents new structure,\r\n\r\n* **@ValidarCampo**\r\n * String expresion() default \"\"; ----> Validate Regex \r\n * int longitudMaxima() default 0;----> Number max length\r\n * int longitudMinima() default 0;----> Number min length\r\n * boolean requirido() default false;----> Obligatory data\r\n * String[] listaLimitante() default {};----> List of possible values to take\r\n * String formatoFecha() default \"yyyy-MM-dd\";----> Format date\r\n * String fechaMinima() default \"\";---->  minimum date \r\n * String fechaMaxima() default \"\"; ----> maximum date\r\n\r\n## Tests\r\n\r\n[See unite test ] (https://github.com/sebasrock/ProcesadoraCsv/tree/develop/src/test/java/co/bassan/test)\r\n\r\n## License\r\n\r\nA short snippet describing the license (MIT, Apache, etc.)\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}